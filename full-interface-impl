public interface IMqttService
{
    bool IsConnected { get; }
    Task EnsureConnectedAsync();
    Task DisconnectAsync(bool cleanDisconnect = true);
    Task PublishAsync(string topic, string payload, bool retainFlag = true, int qos = 1);
    Task PublishCommandAsync(string deviceId, string command);
    IDisposable RegisterPageSubscription(object page, string topic, int qos, Action<string> onMessage);
}

public class MqttService : IMqttService, IDisposable
{
    private readonly MqttClient _client;
    private readonly ILogger<MqttService> _logger;
    private readonly ConcurrentDictionary<object, List<Action>> _pageCleanups = new();
    
    public bool IsConnected => _client.IsConnected;
    
    public MqttService(ILogger<MqttService> logger, IConfiguration config)
    {
        _logger = logger;
        
        // Initialize with EMPTY subscriptions - all subscriptions managed per-page
        var emptySubscriptions = new List<MqttSubscription>();
        
        _client = new MqttClient(logger, emptySubscriptions);
        _client.MessageReceived += OnMessageReceived;
        
        _logger.LogInformation("[MqttService.Constructor] Service initialized with no pre-configured subscriptions");
    }
    
    public async Task EnsureConnectedAsync()
    {
        if (IsConnected)
        {
            _logger.LogDebug("[MqttService.EnsureConnectedAsync] Already connected");
            return;
        }
        
        _logger.LogInformation("[MqttService.EnsureConnectedAsync] Establishing connection to MQTT broker");
        
        try
        {
            await _client.ConnectAsync();
            _logger.LogInformation("[MqttService.EnsureConnectedAsync] Connected successfully");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "[MqttService.EnsureConnectedAsync] Connection failed");
            throw;
        }
    }
    
    public async Task DisconnectAsync(bool cleanDisconnect = true)
    {
        if (!IsConnected)
        {
            _logger.LogDebug("[MqttService.DisconnectAsync] Already disconnected");
            return;
        }
        
        _logger.LogInformation("[MqttService.DisconnectAsync] Disconnecting with cleanDisconnect: {CleanDisconnect}", 
            cleanDisconnect);
            
        await _client.DisconnectAsync(cleanDisconnect);
    }
    
    public async Task PublishAsync(string topic, string payload, bool retainFlag = true, int qos = 1)
    {
        await EnsureConnectedAsync();
        
        _logger.LogInformation("[MqttService.PublishAsync] Publishing to '{Topic}' - QoS: {QoS}, Retain: {Retain}", 
            topic, qos, retainFlag);
            
        await _client.PublishAsync(topic, payload, retainFlag, qos);
    }
    
    public async Task PublishCommandAsync(string deviceId, string command)
    {
        var payload = $"{deviceId}:{command}:{DateTime.UtcNow:O}";
        _logger.LogInformation("[MqttService.PublishCommandAsync] Command '{Command}' for device '{DeviceId}'", 
            command, deviceId);
            
        await PublishAsync("executecommand", payload, false, 1);
    }
    
  public IDisposable RegisterPageSubscription(object page, string topic, int qos, Action<string> onMessage)
{
    var pageName = page.GetType().Name;
    _logger.LogInformation("[MqttService.RegisterPageSubscription] {PageName} subscribing to '{Topic}' with QoS {QoS}", 
        pageName, topic, qos);
    
    // Ensure we have a cleanup list for this page
    _pageCleanups.TryAdd(page, new List<Action>());
    
    // Subscribe to the topic
    _client.SubscribeAsync(topic, qos);
    
    // Create message handler - FIX: Match the actual event signature
    EventHandler<MqttSubscription> handler = (sender, msg) =>
    {
        if (msg.Topic == topic)
        {
            _logger.LogDebug("[MqttService.MessageHandler] {PageName} received message on '{Topic}': {Payload}", 
                pageName, topic, msg.Payload);
            onMessage(msg.Payload);
        }
    };
    
    _client.MessageReceived += handler;
    
    // Add cleanup action
    Action cleanup = () =>
    {
        _client.MessageReceived -= handler;
        _logger.LogInformation("[MqttService.Cleanup] {PageName} unsubscribed from '{Topic}'", pageName, topic);
    };
    
    _pageCleanups[page].Add(cleanup);
    
    // Return disposable that removes just this subscription
    return new DisposableAction(() =>
    {
        cleanup();
        _pageCleanups[page]?.Remove(cleanup);
        
        // If no more subscriptions for this page, remove it
        if (_pageCleanups.TryGetValue(page, out var list) && list.Count == 0)
        {
            _pageCleanups.TryRemove(page, out _);
        }
    });
}
    
    private void OnMessageReceived(object sender, MqttSubscription e)
    {
        _logger.LogInformation("[MqttService.OnMessageReceived] Topic: '{Topic}', Payload: {Payload}", 
            e.Topic, e.Payload);
    }
    
    public void Dispose()
    {
        _logger.LogInformation("[MqttService.Dispose] Cleaning up all subscriptions and disconnecting");
        
        // Clean up all subscriptions
        foreach (var kvp in _pageCleanups)
        {
            foreach (var cleanup in kvp.Value)
            {
                cleanup();
            }
        }
        _pageCleanups.Clear();
        
        // Disconnect
        if (IsConnected)
        {
            _client?.DisconnectAsync(true).Wait(TimeSpan.FromSeconds(5));
        }
    }
}
