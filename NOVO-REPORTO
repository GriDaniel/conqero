Pull Request Description: MQTT Client Integration into Blazor Project
Overview
This PR integrates an MQTT client into our Blazor app for real-time device communication. It uses dependency injection, a service interface, and an abstract base class to deliver a modular, reusable, and maintainable framework for MQTT subscriptions and command publishing.
Key Components
IMqttService & MqttService
IMqttService: Injectable API for MQTT operations (connect, publish, subscribe), decoupling components from the client implementation.
MqttService: Singleton managing the MQTT client. Handles connections, subscriptions, and message dispatching. Supports dynamic topic subscriptions via RegisterPageSubscription and command publishing with PublishAsync/PublishCommandAsync.
MqttPageBase
Abstract class minimizing boilerplate for MQTT-enabled Blazor pages.
Subscribes to topics (via GetPageSubscriptions) in OnInitializedAsync, routes messages to handlers (via RegisterMessageHandler), and cleans up with IDisposable.
Simplifies real-time UI updates with StateHasChanged.
DeviceControl Example
Extends MqttPageBase to subscribe to "devicestate" and "temperature/status" for live updates.
Processes messages to update state and logs, publishes commands (e.g., "START") via <MqttButton>.
Implementation
Flow: Pages extend MqttPageBase, define subscriptions/handlers. MqttService invokes HandleMessage to route messages to page-specific logic.
DI: IMqttService injection ensures a shared client and testability.
Cleanup: IDisposable unsubscribes topics on page disposal.
Benefits
Reusability: Extend MqttPageBase for new MQTT pages with ease.
Maintainability: Clean separation of MQTT logic and UI; injectable service aids testing/debugging.
Real-Time: Seamless device updates and command integration.
Efficiency: Reduces dev time and code duplication.
Conclusion
This scalable MQTT framework enhances our Blazor app with real-time capabilities, demonstrated in DeviceControl, and is ready for broader use with minimal overhead.
